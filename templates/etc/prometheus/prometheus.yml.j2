global:
  scrape_interval:     {{ prometheus_global_scrape_interval }} # By default, scrape targets every 15 seconds.
  evaluation_interval: {{ prometheus_global_evaluation_interval }} # By default, scrape targets every 15 seconds.
  scrape_timeout: {{ prometheus_global_scrape_timeout }} # By default, set timeout to 10 second.

{% if prometheus_rule_files is defined %}
# Rule files specifies a list of files from which rules are read.
rule_files:
  {% for dest in prometheus_rule_files %}
  - {{ prometheus_rules_path }}/{{ dest }}
  {% endfor %}
{% endif %}

# A list of scrape configurations.
scrape_configs:

  - job_name: 'prometheus'
    scrape_interval: {{ prometheus_self_scrape_interval }}
    scrape_timeout:  {{ prometheus_self_evaluation_interval }}
    static_configs:
      - targets: ['localhost:9090']

{% for job in prometheus_jobs %}
  - job_name: "{{ job.name }}"

{% if job.scrape_interval is defined %}
    # How frequently to scrape targets from this job.
    scrape_interval: {{ job.scrape_interval }}
{% endif %}

{% if job.scrape_timeout is defined %}
    # Per-target timeout when scraping this job.
    scrape_timeout: {{ job.scrape_timeout }}
{% endif %}

{% if job.metrics_path is defined %}
    # The HTTP resource path on which to fetch metrics from targets.   
    metrics_path: {{ job.metrics_path }}
{% endif %}

{% if job.honor_labels is defined %}
    # honor_labels controls how Prometheus handles conflicts between labels that are
    # already present in scraped data and labels that Prometheus would attach
    # server-side ("job" and "instance" labels, manually configured target
    # labels, and labels generated by service discovery implementations).
    #
    # If honor_labels is set to "true", label conflicts are resolved by keeping label
    # values from the scraped data and ignoring the conflicting server-side labels.
    #
    # If honor_labels is set to "false", label conflicts are resolved by renaming
    # conflicting labels in the scraped data to "exported_<original-label>" (for
    # example "exported_instance", "exported_job") and then attaching server-side
    # labels. This is useful for use cases such as federation, where all labels
    # specified in the target should be preserved.
    #
    # Note that any globally configured "external_labels" are unaffected by this
    # setting. In communication with external systems, they are always applied only
    # when a time series does not have a given label yet and are ignored otherwise.
    honor_labels: {{ job.honor_labels | to_yaml }}
{% endif %}

{% if job.scheme is defined %}
    # The URL scheme with which to fetch metrics from targets.
    scheme: {{ job.scheme }}
{% endif %}

{% if job.params is defined %}
    # Optional HTTP URL parameters.
    params:
{% for param in job.params %}
      - {{ param }}
{% endfor %}
{% endif %}

{% if job.basic_auth is defined %}
    # Optional HTTP basic authentication information.
    basic_auth:
{% for opt_name, opt_value in job.basic_auth.iteritems() %}
      {{ opt_name }}: {{ opt_value }}
{% endfor %}
{% endif %}

{% if job.bearer_token is defined %}
    # Optional bearer token authentication information.
    bearer_token: {{ job.bearer_token }}
{% endif %}

{% if job.bearer_token_file is defined %}
    # Optional bearer token file authentication information.
    bearer_token_file: {{ job.bearer_token_file }}
{% endif %}

{% if job.tls_config is defined %}
    # Optional TLS configuration.
    tls_config:
{% for opt_name, opt_value in job.tls_config.iteritems() %}
      {{ opt_name }}: {{ opt_value | to_yaml }}
{% endfor %}
{% endif %}

{% if job.proxy_url is defined %}
    # Optional proxy URL.
    proxy_url: {{ job.proxy_url }}
{% endif %}

    {{ job.config_type | mandatory }}:
{% for opt_name, opt_value in job.config_options.iteritems() %}
{% if opt_value is string %}
      {{ opt_name }}: '{{ opt_value }}'
{% elif opt_value is sequence %}
      - {{ opt_name }}:
{% for value in opt_value %}
{% if value is string %}
        - '{{ value }}'
{% elif value is mapping %}
{% for key, val in value.iteritems() %}
        {{ key }}: '{{ val }}'
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

{% endfor %}
